const fs = require('fs');
const path = require('path');

/**
 * Generate CSV content from report data
 */
async function generateCSV(reportData) {
  try {
    const { data, statistics } = reportData;
    
    if (!data || !Array.isArray(data)) {
      return 'No data available';
    }

    // Get headers from first data item
    const headers = Object.keys(data[0] || {});
    
    // Create CSV content
    let csvContent = headers.join(',') + '\n';
    
    // Add data rows
    data.forEach(item => {
      const row = headers.map(header => {
        const value = item[header];
        // Handle nested objects and arrays
        if (typeof value === 'object' && value !== null) {
          return JSON.stringify(value);
        }
        return value || '';
      });
      csvContent += row.join(',') + '\n';
    });

    return csvContent;
  } catch (error) {
    console.error('Error generating CSV:', error);
    return 'Error generating CSV file';
  }
}

/**
 * Generate Excel content from report data
 */
async function generateExcel(reportData) {
  try {
    const { data, statistics } = reportData;
    
    if (!data || !Array.isArray(data)) {
      return 'No data available';
    }

    // For now, return CSV format as Excel (you can integrate with xlsx library later)
    return await generateCSV(reportData);
  } catch (error) {
    console.error('Error generating Excel:', error);
    return 'Error generating Excel file';
  }
}

/**
 * Generate PDF content from report data
 */
async function generatePDF(reportData, reportType) {
  try {
    const { data, statistics, monthlyTrend } = reportData;
    
    // Create simple HTML content for PDF
    let htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Report</title>
        <style>
          body { font-family: "Inter", sans-serif; margin: 20px; }
          .header { text-align: center; margin-bottom: 30px; }
          .stats { display: flex; justify-content: space-around; margin-bottom: 30px; }
          .stat-item { text-align: center; }
          .stat-value { font-size: 24px; font-weight: bold; color: #2563eb; }
          .stat-label { color: #6b7280; }
          table { width: 100%; border-collapse: collapse; margin-top: 20px; }
          th, td { border: 1px solid #d1d5db; padding: 8px; text-align: left; }
          th { background-color: #f3f4f6; font-weight: bold; }
          .footer { margin-top: 30px; text-align: center; color: #6b7280; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Report</h1>
          <p>Generated on ${new Date().toLocaleDateString()}</p>
        </div>
    `;

    // Add statistics
    if (statistics) {
      htmlContent += '<div class="stats">';
      Object.entries(statistics).forEach(([key, value]) => {
        if (typeof value === 'number') {
          htmlContent += `
            <div class="stat-item">
              <div class="stat-value">${value.toLocaleString()}</div>
              <div class="stat-label">${key.replace(/([A-Z])/g, ' $1').trim()}</div>
            </div>
          `;
        }
      });
      htmlContent += '</div>';
    }

    // Add data table
    if (data && Array.isArray(data) && data.length > 0) {
      const headers = Object.keys(data[0]);
      htmlContent += '<table>';
      htmlContent += '<thead><tr>';
      headers.forEach(header => {
        htmlContent += `<th>${header.replace(/([A-Z])/g, ' $1').trim()}</th>`;
      });
      htmlContent += '</tr></thead><tbody>';
      
      data.slice(0, 50).forEach(item => { // Limit to first 50 rows for PDF
        htmlContent += '<tr>';
        headers.forEach(header => {
          const value = item[header];
          let displayValue = value;
          if (typeof value === 'object' && value !== null) {
            displayValue = JSON.stringify(value);
          }
          htmlContent += `<td>${displayValue || ''}</td>`;
        });
        htmlContent += '</tr>';
      });
      htmlContent += '</tbody></table>';
    }

    htmlContent += `
        <div class="footer">
          <p>Report generated by PG Management System</p>
        </div>
      </body>
      </html>
    `;

    return htmlContent;
  } catch (error) {
    console.error('Error generating PDF:', error);
    return 'Error generating PDF file';
  }
}

module.exports = {
  generateCSV,
  generateExcel,
  generatePDF
}; 